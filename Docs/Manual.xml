<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<book lang="en">
<bookinfo>
    <title>Perl GTD</title>
    <date>November 2011</date>
    <author>
        <firstname>Drew</firstname>
        <surname>Sullivan</surname>
        <email>drew@ss.org</email>
    </author>
    <authorinitials>DS</authorinitials>
<revhistory><revision><revnumber>0.0</revnumber><date>November 2011</date><authorinitials>DS</authorinitials></revision></revhistory>
</bookinfo>
<preface>
<title></title>
<simpara>Dedication</simpara>
<informalexample>
<simpara>Thankyou too all the open source developers before me.
David Allen for gidence on why I need to do it.
PHP gtd for a graphical interface and database structure
todo.txt for a simple command line interface</simpara>
<simpara>Preface</simpara>
</informalexample>
<simpara>The optional book preface goes here at section level zero.</simpara>
</preface>
<section id="_preface_sub_section">
<title>Preface Sub-section</title>
<note><simpara>Preface and appendix subsections start out of sequence at level
2 (level 1 is skipped). This only applies to multi-part book
documents.</simpara></note>
<itemizedlist>
<listitem>
<simpara>
Notes on Documentation <emphasis role="strong">*</emphasis> 2009-Aug-20
</simpara>
</listitem>
</itemizedlist>
<simpara>[<emphasis>] Read SDF manual to figure out sdf structure
[</emphasis>] Create Doc structure
[<emphasis>] Create Doc files to reflect structure
[</emphasis>] Create git repository for sdf
[<emphasis>] Add support to sdf for pdf via oowriter
[</emphasis>] Add support to sdf for epub directly via html</simpara>
<simpara>[_] Add support to oocalc for dumping of database into sheets</simpara>
<simpara>=head Overview</simpara>
<simpara>As part of startup the data in the database is processed using three criteria.
From all of the data, it goes through selection, filtering and then sorting.
Each report has its own default selection, filter and sort order.</simpara>
<simpara>=head Selection</simpara>
<simpara>include selection.sdf</simpara>
<simpara>=head Filter</simpara>
<simpara>include filter.sdf</simpara>
<simpara>=head Sort</simpara>
<simpara>include sort.sdf</simpara>
<simpara>=head Report</simpara>
<simpara>include report.sdf</simpara>
<simpara>=head Notes</simpara>
<simpara>include local.sdf</simpara>
<simpara>GIT</simpara>
<informalexample>
<simpara>Using git</simpara>
<screen>    2010-July-02

        RPMs in /var/rpm/git
        Now look to DAG for RPMS

    Server:

        pim package
        gtd package
        gtdphp package

    [_] salt:/u/git/gtd.git
    [_] salt:/u/git/pim.git
    [_] use git.staff on rocksalt
    [_] create git.ss.org =&gt; salt
    [_] gittosis (sp?)
    [_] setup ~/lib/Hier =&gt; git:gdt.git
    [_] setup ~/lib/Pim =&gt; git:pim.git

    [_] migrate git.git to pim
    [_] incorporate gtdphp

    [_] upgrade gtdphp

Using rpm</screen>
<simpara>2010-July-02</simpara>
<itemizedlist>
<listitem>
<simpara>
GTD running on drugs
</simpara>
<itemizedlist>
<listitem>
<simpara>
Prove install (Bundle::Test)
</simpara>
</listitem>
<listitem>
<simpara>
Mysql install
</simpara>
</listitem>
<listitem>
<simpara>
GTD &amp;&amp; GTD test databases
</simpara>
</listitem>
<listitem>
<simpara>
GTD db &lt;&#8658; replicated to rock
</simpara>
</listitem>
<listitem>
<simpara>
gtdtest db &lt;&#8658; replicated to rock
</simpara>
</listitem>
<listitem>
<simpara>
test suite defined
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>=Head actions</simpara>
<simpara>Detailed list of projects with (next) actions</simpara>
<simpara>=Head addplans</simpara>
<simpara>add plan action items to unplaned projects</simpara>
<simpara>=Head bulkedit</simpara>
<simpara>Create Bulk create Projects/Actions items from a file</simpara>
<simpara>=Head bulklist</simpara>
<simpara>Bulk List project for use in bulk load</simpara>
<simpara>=Head bulkload</simpara>
<simpara>Create Projects/Actions items from a file</simpara>
<simpara>=Head cct</simpara>
<simpara>List Categories/Contexts/Time Frames</simpara>
<simpara>=Head checklist</simpara>
<simpara>display a check list</simpara>
<simpara>=Head clean</simpara>
<simpara>clean unused categories</simpara>
<simpara>=Head delete</simpara>
<simpara>Delete listed actions/projects (will orphine items)</simpara>
<simpara>=Head doit</simpara>
<simpara>doit tracks which projects/actions have had movement</simpara>
<simpara>=Head done</simpara>
<simpara>Tag listed projects/actions as done</simpara>
<simpara>=Head dump</simpara>
<simpara>dump records in edit format</simpara>
<simpara>=Head edit</simpara>
<simpara>Edit listed actions/projects</simpara>
<simpara>=Head fixcct</simpara>
<simpara>Fix Categories/Contexts/Time Frames</simpara>
<simpara>=Head gui</simpara>
<simpara>Tk gui front end</simpara>
<simpara>=Head help</simpara>
<simpara>List Reports</simpara>
<simpara>=Head help.pm:                  next unless /^sub Report_(\w+)/;
=Head hierlist</simpara>
<simpara>List all top level item (Project and above)</simpara>
<simpara>=Head hier</simpara>
<simpara>Hiericial List of Values/Visions/Roles&#8230;</simpara>
<simpara>=Head init</simpara>
<simpara>Init ~/.todo structure</simpara>
<simpara>=Head items</simpara>
<simpara>list titles for any filtered class (actions/projects etc)</simpara>
<simpara>=Head list</simpara>
<simpara>list titles for any filtered class (actions/projects etc)</simpara>
<simpara>=Head merge</simpara>
<simpara>Merge Projects (first list is receiver)</simpara>
<simpara>=Head new</simpara>
<simpara>create a new action or project</simpara>
<simpara>=Head planner</simpara>
<simpara>Create a planner file from gtd db</simpara>
<simpara>=Head projects</simpara>
<simpara>List projects&#8201;&#8212;&#8201;live, plan or someday</simpara>
<simpara>=Head purge</simpara>
<simpara>interactive purge completed work</simpara>
<simpara>=Head records</simpara>
<simpara>detailed list all records for a type</simpara>
<simpara>=Head renumber</simpara>
<simpara>Renumber task Ids</simpara>
<simpara>=Head reports</simpara>
<simpara>List Reports</simpara>
<simpara>=Head review</simpara>
<simpara>Review all projects with actions</simpara>
<simpara>=Head search</simpara>
<simpara>Search for items</simpara>
<simpara>=Head status</simpara>
<simpara>report status of projects/actions</simpara>
<simpara>=Head taskjuggler</simpara>
<simpara>generate taskjuggler file from gtd db</simpara>
<simpara>=Head tasks</simpara>
<simpara>quick List by various methods</simpara>
<simpara>=Head todo</simpara>
<simpara>List high priority next actions</simpara>
<simpara>=Head toplevel</simpara>
<simpara>List Values/Visions/Roles</simpara>
<simpara>=Head update</simpara>
<simpara>Command line update of an action/project</simpara>
<simpara>By default the whole database is selected.  By specifiing a part of the
database all the records below the selected part are logical added for processing.
If more than one slice is selected then they are added in the order you specify.
This is important because it can effect the default (first) parent.</simpara>
<simpara>The selection criteria is done by prefixing the request with a slash or =.</simpara>
<literallayout class="monospaced">/pattern
=tid
=title
=T:title</literallayout>
<simpara>The /pattern form searches both the title and the description for the pattern.
It adds only the matched items and doesn&#8217;t include any children that are not actions</simpara>
<simpara>The = form adds all children under the specified criteria.</simpara>
<simpara>The =tid uses the tid (Task ID number) as the toplevel and adds all the children to the selection.</simpara>
<simpara>The =title takes the title and first searches case sensative then case insensative.</simpara>
<simpara>The last form =T:title  restricts the title search to only those with type <emphasis>T</emphasis>
   (v,r,g,p) = Value/Vision, Role, Goal, Project</simpara>
<simpara>Sorting is the last stage of the prefiltering.  All reports support
sorting, but it doesn&#8217;t make sense for some to sort by anything but
the reports default criteria.  For example the action reports group the
output by goal/project and will produce a less readable output if the
sort criteria is changed.</simpara>
<literallayout class="monospaced">tid          =&gt; by Task ID
task,title   =&gt; by task title
hier         =&gt; by full hierarchy title
goal         =&gt; by hierachy from goal by title
status       =&gt; by completed status
priority     =&gt; by priority
doitdate     =&gt; by doitdate,
change       =&gt; by last update to item
age          =&gt; by creation date</literallayout>
<simpara># by_Sort need to work
[_] by_Sort</simpara>
<simpara># sort routines (in sort.pm)
[<emphasis>] by_age
[</emphasis>] by_change
[<emphasis>] by_doitdate
[</emphasis>] by_goal_task
[<emphasis>] by_hier
[</emphasis>] by_name
[<emphasis>] by_pri
[</emphasis>] by_pri,
[<emphasis>] by_priority
[</emphasis>] by_status
[<emphasis>] by_task
[</emphasis>] by_tid</simpara>
<simpara># sort calls (need fixing)
[<emphasis>] actions     by_task
[</emphasis>] addplans    by_goal_task
[<emphasis>] checklis    by_task
[</emphasis>] doit        by_doitdate
[<emphasis>] dump        by_priority
[</emphasis>] items       by_task
[<emphasis>] projects    by_goal_task
[</emphasis>] records     by_task
[<emphasis>] tasks       by_task
[</emphasis>] todo        by_priority
[<emphasis>] util        by_priority
[</emphasis>] walk        by_name</simpara>
<simpara>#==============================================================================
# FILE: ~/lib/Hier/Docs/Test-Plan.txt
#==============================================================================
# Test todo/gtd -R XXXX
#==============================================================================
[<emphasis>] Document global options
[</emphasis>] Document meta-desc mode
[<emphasis>] Document meta-desc filtered meanings
[</emphasis>] Document sort-order options (NEW)
[_] Document option hints(NEW)</simpara>
<simpara>[<emphasis>] Test Global options:
  [</emphasis>]     -x     &#8201;&#8212;&#8201;turn Debug on.
  [<emphasis>]     -m     &#8201;&#8212;&#8201;update metadata
  [</emphasis>]
  [<emphasis>]     -n &#8230; &#8201;&#8212;&#8201;new tasks &#8230;
  [</emphasis>]     -e &#8230; &#8201;&#8212;&#8201;edit tasks &#8230;
  [<emphasis>]     -d &#8230; &#8201;&#8212;&#8201;done tasks &#8230;
  [</emphasis>]     -u &#8230; &#8201;&#8212;&#8201;update tasks &#8230;
  [<emphasis>]     -D &#8230; &#8201;&#8212;&#8201;delete tasks &#8230;
  [</emphasis>]     -R :   &#8201;&#8212;&#8201;Run report : and exit (see -R reports for list)
  [<emphasis>]
  [</emphasis>] x   -W     &#8201;&#8212;&#8201;Wiki mode output
  [<emphasis>] x   -H     &#8201;&#8212;&#8201;Html mode output
  [</emphasis>]
  [<emphasis>]     -a     &#8201;&#8212;&#8201;all tasks but done
  [</emphasis>]     -A     &#8201;&#8212;&#8201;All includes done
  [<emphasis>]     -Z :   &#8201;&#8212;&#8201;gtd database group (default: test)
  [</emphasis>]
  [<emphasis>]     -p :   &#8201;&#8212;&#8201;set the priority (default 3; range 1..5)
  [</emphasis>]     -c :   &#8201;&#8212;&#8201;set the category (default '')
  [<emphasis>]     -N :   &#8201;&#8212;&#8201;set the note text
  [</emphasis>]     -t :   &#8201;&#8212;&#8201;set the task text
  [<emphasis>]
  [</emphasis>]     -l :   &#8201;&#8212;&#8201;limit to first : (default 10, * == all)
  [_]     -r     &#8201;&#8212;&#8201;reverse sort</simpara>
<simpara>[<emphasis>] Test meta-desc mode in todo/gtd
  [</emphasis>]   @XXXX   cct context setting (sets hints as well)
        [<emphasis>] context
        [</emphasis>] category
        [<emphasis>] timeframe
        [</emphasis>] tag
      [<emphasis>]       <superscript>sort     set </superscript>sort<superscript>criter</superscript>bylist
      [</emphasis>]       /XXXX     search project/action (hier/todo) sets picks hint
      [<emphasis>]       =DDDD     use XXX as tid&#8201;&#8212;&#8201;sets parent hint
      [</emphasis>]       =XXXX     search hier title&#8201;&#8212;&#8201;sets parent hint
      [<emphasis>]       =T:XXXX   search hier title with type T&#8201;&#8212;&#8201;sets parent hint
      [</emphasis>]       *XXXX     sets type hint
      [<emphasis>]       T:        use T as type (sets type hint)
      [</emphasis>]       &#8230;.      passed to reports
      [<emphasis>]       %opt=val  sets opt to val
      [</emphasis>]   Picks (tid found via / or left on the command line)</simpara>
<literallayout class="monospaced">[_] Test filtered meaning in gtd (~Exclude first, +Include next, default none)
    [_] +done
    [_] +current
    [_] +next
    [_] +someday
    [_] +waiting
    [_] +tickles</literallayout>
<literallayout class="monospaced">[_] +late
[_] +due
[_] +slow
[_] +idea</literallayout>
<literallayout class="monospaced">[_] +dink
[_] +duck
[_] +private
[_] +recur</literallayout>
<literallayout class="monospaced">[_] all     =&gt; (all of the above)</literallayout>
<literallayout class="monospaced">[_] live    =&gt; +current +next
[_] future  =&gt; +someday +tickle +waiting</literallayout>
<literallayout class="monospaced">[_] Add Debug to filters
[_] Add Debug to access.ini
[_] Add Options to access.ini
[_] Chain Options?
[_] Meta Groups?</literallayout>
<literallayout class="monospaced">[_] Options
    [_] Debug = 0           # Debug code
    [_] Debug_sub = 0       # Debug code in subsystem
    [_] DB_Update = 1       #
    [_] Title = ''          # Set title (task name)
    [_] Descrption = ''     # Set description for new/update
    [_] Result = ''         # Set result for new/update
    [_] Priority = ''       # Set priorty for new/update
    [_] Parent = ''         # Set Parent for new/update
    [_] Type = ''           # Set Parent for new/update</literallayout>
<simpara>[_] Test sort meaning in gtd
[X] !. stopped.</simpara>
<simpara>[<emphasis>] Define task/hier filter syntax
[</emphasis>] Fix task_filter vs hier_filter (Seperate Include/Exclude)</simpara>
<simpara>#==============================================================================
# Test gtd -R XXXX
#==============================================================================
# Hier walks
[<emphasis>]     aspect &#8658; hier roles
[</emphasis>] hier
  [<emphasis>] walk (default: Project) sub-type&#8217;s max-depth
    [ ] Value
    [ ] Vision
    [ ] Role
    [ ] Goal
    [</emphasis>] Project
    [_] Action</simpara>
<simpara># Hier filters (review) also add action results for Hier reports
          +---------- [<emphasis>] aspect?
          |   +------ [</emphasis>] walk (not a simple list)
          |   |
         [<emphasis>] [</emphasis>] Cur     &#8658; +current
         [<emphasis>] [</emphasis>] Next    &#8658; +next
         [<emphasis>] [</emphasis>] Done    &#8658; +done
         [<emphasis>] [</emphasis>] Late    &#8658; +late
         [<emphasis>] [</emphasis>] Tickle  &#8658; +tickle
         [<emphasis>] [</emphasis>] Someday &#8658; +someday
         [<emphasis>] [</emphasis>] Waiting &#8658; +waiting</simpara>
<literallayout class="monospaced">[_] [_] Slow    =&gt; +slow
[_] [_] Ideas   =&gt; +idea
[_] [_] Due     =&gt; +due
[_] [_] Live    =&gt; +current +next
[_] [_] Future  =&gt; +someday +tickle +waiting</literallayout>
<simpara># Action reports
          +---------- [<emphasis>] projects (not a simple list)
          |   +------ [</emphasis>] actions (not a simple list)
          |   |
         [<emphasis>] [</emphasis>] Cur     &#8658; +current
         [<emphasis>] [</emphasis>] Next    &#8658; +next
         [<emphasis>] [</emphasis>] Done    &#8658; +done
         [<emphasis>] [</emphasis>] Late    &#8658; +late
         [<emphasis>] [</emphasis>] Tickle  &#8658; +tickle
         [<emphasis>] [</emphasis>] Someday &#8658; +someday
         [<emphasis>] [</emphasis>] Waiting &#8658; +waiting</simpara>
<literallayout class="monospaced">[_] [_] Due     =&gt; +due
[_] [_] Slow    =&gt; +slow
[_] [_] Ideas   =&gt; +idea</literallayout>
<literallayout class="monospaced">[_] [_] Live    =&gt; +current +next
[_] [_] Future  =&gt; +someday +tickle +waiting</literallayout>
<literallayout class="monospaced">[_] checklist -- by name can pick checklists or lists
    [_] default -- lists of lists
    [_] checklist-name
    [_] list-name</literallayout>
<simpara># List details:
    +--------------[<emphasis>] records [All]
    |   +----------[</emphasis>] dump (full record dump)
    |   |   +------[<emphasis>] list (list titles)
    |   |   |   +--[</emphasis>] items (titles/description/notes(results))
    |   |   |   |
   [<emphasis>] [X] [</emphasis>] [<emphasis>] Value
   [</emphasis>] [X] [<emphasis>] [</emphasis>] Vision
   [<emphasis>] [X] [</emphasis>] [<emphasis>] Role
   [</emphasis>] [X] [<emphasis>] [</emphasis>] Goal
   [<emphasis>] [</emphasis>] [<emphasis>] [</emphasis>] Project
   [<emphasis>] [</emphasis>] [<emphasis>] [</emphasis>] Actions
   [<emphasis>] [</emphasis>] [<emphasis>] [</emphasis>] Inbox
   [<emphasis>] [</emphasis>] [<emphasis>] [</emphasis>] Waiting
   [<emphasis>] [</emphasis>] [<emphasis>] [</emphasis>] Reference
   [<emphasis>] [</emphasis>] [<emphasis>] [</emphasis>] List
   [<emphasis>] [</emphasis>] [<emphasis>] [</emphasis>] Checklist
   [<emphasis>] [</emphasis>] [<emphasis>] [</emphasis>] Item</simpara>
<simpara># Special reports</simpara>
<simpara>[<emphasis>] [</emphasis>] report&#8201;&#8212;&#8201;lists reports that can be run
[<emphasis>] [</emphasis>] help  &#8201;&#8212;&#8201;gives help</simpara>
<simpara># Other reports
[<emphasis>] status (gives view to selection system)
[</emphasis>] cct&#8201;&#8212;&#8201;category/conext/timeframe(tag)
[<emphasis>]     toplevel &#8658; hier list {Values,Visions,Goals}
[</emphasis>] todo
[<emphasis>] tasks
[</emphasis>] hierlist&#8201;&#8212;&#8201;grepable list of hier items
[<emphasis>] checklist
    [</emphasis>] weekly &#8201;&#8212;&#8201;weekly review
                (project +live
                (actions ~cur +next
                (projects +future
    [_] monthly&#8201;&#8212;&#8201;monthly review
                (projects +live +future
                (actions +live actions +future</simpara>
<simpara># Exporters
[<emphasis>] planner
[</emphasis>] taskjuggler</simpara>
<simpara># Updaters
[<emphasis>] done (rename tagdone?)
[</emphasis>] delete
[_] doit</simpara>
<simpara>[<emphasis>] fixcct
[</emphasis>] renumber
[_] addplans</simpara>
<simpara>[<emphasis>] bulklist
[</emphasis>] bulkload
[_] bulkedit</simpara>
<simpara>[<emphasis>] clean -?
[</emphasis>] load - load records (reads dumps)
[<emphasis>] edit - edit records (dump/vi/update)
[</emphasis>] init - create database structure
[<emphasis>] merge - merge records
[</emphasis>] new_project - prompts/adds a new project (other other hier)
[<emphasis>] new_task - prompts/adds a new action/next/waiting
[</emphasis>] search - used to find stuff anywhere
[<emphasis>] update - commandline updater
#==============================================================================
# Option Hints
#==============================================================================
[</emphasis>] <emphasis role="strong">*</emphasis> Use ~/.Access.ini &#8658; to set defaults/max/min etc?
[<emphasis>] Debug
[</emphasis>] All
[<emphasis>] Report
[</emphasis>] Database
        [<emphasis>] host
        [</emphasis>] user
        [<emphasis>] pass
        [</emphasis>] db
[<emphasis>] Counts
[</emphasis>] Options=Value
[_] Metadata-update</simpara>
<simpara>[<emphasis>] Default Values
        [</emphasis>] Priority
        [<emphasis>] Today
        [</emphasis>] Title
        [<emphasis>] Description
        [</emphasis>] Note (Result/Output)
        [<emphasis>] Category
[</emphasis>] Tags
[<emphasis>] Picks&#8201;&#8212;&#8201;list of project/actions from /cmd-line
[</emphasis>] Sort
        [<emphasis>] Name
        [</emphasis>] Direction(s)
[<emphasis>] Limit
[</emphasis>] Lines (depth)
[<emphasis>] Column (width)
[</emphasis>] Color (support on term/ps/html/tk?)
[<emphasis>] Category
[</emphasis>] Context
[<emphasis>] Parent
[</emphasis>] Filters
[<emphasis>] Type (deduced by parent)
[</emphasis>] Listmode (-L)
[<emphasis>] pgm - $0&#8201;&#8212;&#8201;Command-name
[</emphasis>] cmd - Command running (Same as Report?)
[<emphasis>] sub - Sub-command (picked of command line
#==============================================================================
# Test gtd sorting
#==============================================================================
# by_Sort need to work
[</emphasis>] by_Sort
[_] names are case insensetive.</simpara>
<simpara>(lowercase only does what is needed)
by_Sort does by what is wanted
sort_by sets the sort criteria</simpara>
<simpara>[<emphasis>] by_age      (created)       <superscript>age
[</emphasis>] by_change   (modified)      </superscript>change
[<emphasis>] by_due      (due)           <superscript>due
[</emphasis>] by_goal_task                </superscript>goal
[<emphasis>] by_hier                     <superscript>hier (order by hier then by_name)
[</emphasis>] by_id                       </superscript>id
[<emphasis>] by_priority                 <superscript>pri or </superscript>priority
[</emphasis>] by_status                   <superscript>status
[_] by_task (name)              </superscript>task</simpara>
<simpara># sort routines (neet to be in sort.pm)
[<emphasis>] by_age
[</emphasis>] by_change
[<emphasis>] by_due
[</emphasis>] by_doitdate
[<emphasis>] by_goal_task
[</emphasis>] by_hier
[<emphasis>] by_name
[</emphasis>] by_priority
[<emphasis>] by_status
[</emphasis>] by_task
[_] by_id</simpara>
<simpara># sort calls (need fixing)
[<emphasis>] actions     by_task
[</emphasis>] addplans    by_goal
[<emphasis>] checklist   by_task
[</emphasis>] doit        by_doitdate
[<emphasis>] dump        by_priority
[</emphasis>] items       by_task
[<emphasis>] projects    by_goal
[</emphasis>] records     by_task
[<emphasis>] tasks       by_task
[</emphasis>] todo        by_priority
[<emphasis>] util        by_priority
[</emphasis>] walk        by_name</simpara>
<simpara>==============================================================================
# Grep for Bug and fix
#==============================================================================
[<emphasis>] CCT.pm:     warn "#BUG Can&#8217;t insert $key &#8658; $val\n";
[</emphasis>] CCT.pm:     warn "BUG Can&#8217;t update $key &#8658; $val\n";
[<emphasis>] CCT.pm:     BUG $CCT&#8594;name is horibly expensive
[</emphasis>] CCT.pm:     die "BUG Can&#8217;t rename $key &#8658; $newname\n";
[<emphasis>] db.pm:      BUG we need to create it?
[</emphasis>] db.pm:      BUG we need to create it?
[<emphasis>] Sort.pm:    BUG fetch command line option sort override
[</emphasis>] Sort.pm:    BUG make by_Sort an eval?
[_] Sort.pm:    BUG junk sub need to walk to hier</simpara>
<simpara>[<emphasis>] Report/actions.pm:  BUG should walk down from here via get_children
[</emphasis>] Report/actions.pm:  BUG rather walk up in has_parent
[<emphasis>] Report/doit.pm:     my($List) = 0; BUG should be an option
[</emphasis>] Report/dump.pm:     BUG handle missing keys from @Ordered
[<emphasis>] Report/edit.pm:     BUG handle missing keys from @Ordered (see Report/dump.pm)
[</emphasis>] Report/new.pm:      BUG make this fast and simple.
[<emphasis>] Report/purge.pm:    BUG walk forward stopping on excludes
[</emphasis>] Report/purge.pm:    BUG walk backward keeping on includes
[<emphasis>] Report/review.pm: my($List) = 0; BUG should be an option
[</emphasis>] Report/review.pm: my($Done) = 0; BUG should be an option</simpara>
<simpara>#==============================================================================
# Future
#==============================================================================
[<emphasis>] addplan sub-options
        [</emphasis>] add plan for projects missing actions
        [<emphasis>] add list for projects done but have active actions
        [</emphasis>] add project verb checking
        [<emphasis>] add action  verb checking
        [</emphasis>] add actions for projects with bad verbs
        [<emphasis>] add actions for poor results in hier objects
        [</emphasis>] fix verbs in actions that are missing a verb
        [<emphasis>] how do add verbs to ~/Access.ini [project-verbs] [action-verbs?]
        [</emphasis>] promote actions to next actions (by pri,oldest first,limit 1)
        [<emphasis>] promote priority for actions (by rev-pri,oldest first,limit 1)
        [</emphasis>] add periodic actions support
[<emphasis>] add to clean done propigating
[</emphasis>] write purge
[<emphasis>] write help (lists helps)
[</emphasis>] document helps fixed
        [<emphasis>] add pithy saying to help.pm
[</emphasis>] copy Test-Plan.txt docuement to sdf docuement for documenting gtd
#==============================================================================
# Test gtd -R XXXX  under gui
#==============================================================================
gui</simpara>
<itemizedlist>
<listitem>
<simpara>
Tags:
</simpara>
<literallayout class="monospaced">[ ]     Next action
&lt; &gt;     Completed
( )     action
{ }     someday
&gt; &lt;     ?
} {     later</literallayout>
</listitem>
</itemizedlist>
<simpara>#==============================================================================
# code from util.pm
#==============================================================================
sub type_disp {
        my($ref) = @_;
        my($type) = uc($ref&#8594;get_type());</simpara>
<literallayout class="monospaced">return '&lt;X&gt;'     if $ref-&gt;is_ref_task() &amp;&amp; $ref-&gt;get_completed();
$type = '_'      if $ref-&gt;is_ref_task();</literallayout>
<literallayout class="monospaced">return "&lt;$type\&gt;" if $ref-&gt;get_completed();</literallayout>
<literallayout class="monospaced">        return "}$type\{" if $ref-&gt;get_later();
        return "{$type\}" if $ref-&gt;get_isSomeday() eq 'y';
        return "[$type\]" if $ref-&gt;get_nextaction() eq 'y';
        return "($type\)";
}</literallayout>
<simpara>sub action_disp {
        my($ref) = @_;</simpara>
<literallayout class="monospaced">my($key) = '[ ]';</literallayout>
<literallayout class="monospaced">$key = '[_]' if $ref-&gt;get_nextaction() eq 'y';
$key = '[*]' if $ref-&gt;get_completed();</literallayout>
<literallayout class="monospaced">$key =~ s/.(.)./($1)/   if $ref-&gt;get_isSomeday() eq 'y';
$key =~ s/.{.}./($1)/   if $ref-&gt;get_tickledate();
$key =~ s/(.)./$1w/     if $ref-&gt;get_type() eq 'w';</literallayout>
<literallayout class="monospaced">        return $key;
}</literallayout>
<simpara>#==============================================================================</simpara>
<simpara>[<emphasis>] Need to review all Report to use type_disp or action_display
[</emphasis>] Need to support type disp in bulkload</simpara>
<simpara>Actions and Projects feel more actionable, thus making your brain want
to take action, try using the following verbs to start each of your Next
Actions and Project names.</simpara>
<simpara>Project verbs</simpara>
<itemizedlist>
<listitem>
<simpara>
Finalize
</simpara>
</listitem>
<listitem>
<simpara>
Resolve
</simpara>
</listitem>
<listitem>
<simpara>
Handle
</simpara>
</listitem>
<listitem>
<simpara>
Look into
</simpara>
</listitem>
<listitem>
<simpara>
Submit
</simpara>
</listitem>
<listitem>
<simpara>
Maximize
</simpara>
</listitem>
<listitem>
<simpara>
Organize
</simpara>
</listitem>
<listitem>
<simpara>
Design
</simpara>
</listitem>
<listitem>
<simpara>
Complete
</simpara>
</listitem>
<listitem>
<simpara>
Ensure
</simpara>
</listitem>
<listitem>
<simpara>
Roll out
</simpara>
</listitem>
<listitem>
<simpara>
Update
</simpara>
</listitem>
<listitem>
<simpara>
Install
</simpara>
</listitem>
<listitem>
<simpara>
Implement
</simpara>
</listitem>
<listitem>
<simpara>
Set-up
</simpara>
</listitem>
</itemizedlist>
<simpara>Next-action verbs</simpara>
<itemizedlist>
<listitem>
<simpara>
Call
</simpara>
</listitem>
<listitem>
<simpara>
Organize
</simpara>
</listitem>
<listitem>
<simpara>
Review
</simpara>
</listitem>
<listitem>
<simpara>
Buy
</simpara>
</listitem>
<listitem>
<simpara>
Fill out
</simpara>
</listitem>
<listitem>
<simpara>
Find
</simpara>
</listitem>
<listitem>
<simpara>
Purge
</simpara>
</listitem>
<listitem>
<simpara>
Look into (Web)
</simpara>
</listitem>
<listitem>
<simpara>
Gather
</simpara>
</listitem>
<listitem>
<simpara>
Print
</simpara>
</listitem>
<listitem>
<simpara>
Take
</simpara>
</listitem>
<listitem>
<simpara>
Waiting for
</simpara>
</listitem>
<listitem>
<simpara>
Load
</simpara>
</listitem>
<listitem>
<simpara>
Draft
</simpara>
</listitem>
<listitem>
<simpara>
Email
</simpara>
</listitem>
</itemizedlist>
<simpara>One or more optional appendixes go here at section level zero.</simpara>
<note><simpara>Preface and appendix subsections start out of sequence at level
2 (level 1 is skipped).  This only applies to multi-part book
documents.</simpara></note>
<simpara>Bibliography</simpara>
</informalexample>
<simpara>The bibliography list is a style of AsciiDoc bulleted list.</simpara>
<bibliomixed>
<bibliomisc>
<anchor id="taoup" xreflabel="[taoup]"/>[taoup] Eric Steven Raymond. <emphasis>The Art of Unix
  Programming</emphasis>. Addison-Wesley. ISBN 0-13-142901-9.
</bibliomisc>
</bibliomixed>
<bibliomixed>
<bibliomisc>
<anchor id="walsh-muellner" xreflabel="[walsh-muellner]"/>[walsh-muellner] Norman Walsh &amp; Leonard Muellner.
  <emphasis>DocBook - The Definitive Guide</emphasis>. O&#8217;Reilly &amp; Associates. 1999.
  ISBN 1-56592-580-7.
</bibliomisc>
</bibliomixed>
<simpara>Glossary</simpara>
<informalexample>
<simpara>Glossaries are optional. Glossaries entries are an example of a style
of AsciiDoc labeled lists.</simpara>
<glossentry>
<glossterm>
A glossary term
</glossterm>
<glossdef>
<simpara>
  The corresponding (indented) definition.
</simpara>
</glossdef>
</glossentry>
<glossentry>
<glossterm>
A second glossary term
</glossterm>
<glossdef>
<simpara>
  The corresponding (indented) definition.
</simpara>
</glossdef>
</glossentry>
<simpara>This book is built using asciidoc</simpara>
<simpara>This document is an AsciiDoc multi-part book skeleton containing
briefly annotated element placeholders plus a couple of example index
entries and footnotes. Books are normally used to generate DocBook
markup and the preface, appendix, bibliography, glossary and index
section titles are significant (<emphasis>specialsections</emphasis>).</simpara>
<note><simpara>Multi-part books differ from all other AsciiDoc document formats
in that top level sections (dedication, preface, book parts,
appendices, bibliography, glossary, index) must be level zero headings
(not level one).</simpara></note>
</informalexample>
</section>
</book>
