#!/usr/bin/perl
#######################################
#
#	name: getorder.cgi
#	purpose:  OpticalOnline PrintReport.java
#			  uses the data supplied from
#			  here to populate the retailer's
#			  OpticalOnline Ticket
#			  OrderGenerator.jar uses this
#			  data to populate the browser
#			  report generated by disp_order.cgi
#	links from: OpticalOnline.jar (PrintReport.java)
#				OrderGenerator.jar (OrderReport.java)
#
#######################################
use encoding "utf-8";
use DBI;
use CGI qw/:standard/;
use MIME::Base64;
use Cos::std;
use Cos::Dbh;
use utf8;
use encoding "utf-8";

print "Content-type: text/plain\n\n";

my($orderid) = param( 'order' );

my($ref) = load_utf8($orderid);

##output properties
print "file_version:2.0.2\n";

my (@temp) = split /(-)/, $ref->{date_ordered};
($ref->{date_ordered}) = $temp[0].$temp[1].$temp[2].$temp[3].$temp[4];

print "agent_name:$ref->{'agent_name'}\n"; 	delete $ref->{'agent_name'};
print "agent_version:$ref{'agent_version'}\n";	delete $ref->{'agent_version'};

$efw->{trace_size} = length($ref->{trace_value});
$ref->{trace_value} = encode_base64($ref->{trace_value}, '');

foreach $key (sort keys %$ref) {
	$value = $ref->{$key};

	if ( $key =~ /extra_info/ ) {
		print "$value";
		next;
	}

	next if $key =~ /item_list/;

#	if ($key =~ /date/) {
#		($yr,$mo,$da,$hr,$min) = $value =~ /(....)(..)(..)(..)(..)/;
#		print "$key:$yr-$mo-$da $hr:$min\n";
#		next;
#	}

	$value = '' unless defined $value;
	$value = '' if $value eq 'Choose';

	print "$key:$value\n" if defined $value;
}

my($list) = $ref->{item_list};

my($id) = 0;
foreach my $item (@$list) {
	++$id;

	foreach $key (sort keys %$item) {
		$value = $item->{$key};

		print "${key}_$id:$value\n" if defined $value;
	}
}

my($items) = sql("SELECT * FROM orders_pending WHERE orders_pending_id=?", $orderid);

my($description);
       if (equalsIgnoreCase($items->{fdSource}, "TRACE    - POF"))   { $description = "EDGED LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "TRACE    - UNCUT")) { $description = "EDGED LAB SUPPLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "TRACE    - STOCK")) { $description = "EDGED LAB SUPPLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "NO TRACE - UNCUT")) { $description = "UNCUT LENSES ONLY"; }
# new codes
    elsif (equalsIgnoreCase($items->{fdSource}, "TRACE--POF"))       { $description = "EDGED LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "TRACE--STOCK"))     { $description = "EDGED LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "TRACE--UNCUT"))     { $description = "UNCUT LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "TRACE--SUPPLY"))    { $description = "EDGED LAB SUPPLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "NO TRACE--POF"))    { $description = "UNCUT LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "NO TRACE--STOCK"))  { $description = "UNCUT LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "NO TRACE--UNCUT"))  { $description = "UNCUT LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "NO TRACE--SUPPLY")) { $description = "EDGED LAB SUPPLY"; }
# rd codes
    elsif (equalsIgnoreCase($items->{fdSource}, "SUPPLY"))           { $description = "EDGED LAB SUPPLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "SUPPLIED"))         { $description = "EDGED LAB SUPPLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "ENCLOSED"))         { $description = "?"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "TO-COME"))          { $description = "EDGED TO COME"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "TO COME"))          { $description = "EDGED TO COME"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "LENSES-ONLY"))      { $description = "EDGED LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "LENSES ONLY"))      { $description = "EDGED LENSES ONLY"; }
    elsif (equalsIgnoreCase($items->{fdSource}, "UNCUT"))            { $description = "UNCUT LENSES ONLY"; }
# end of new codes
print "frame_source_desc:$description\n";

print "lens_treatment_desc:$items->{tr_Treatment}\n";
print "lens_treatment_code:$items->{tr_Treatment_code}\n";
print "lens_coating_desc:$items->{tr_Coating}\n";
print "lens_coating_code:$items->{tr_Coating_code}\n";
print "lens_tinting_desc:$items->{tr_Tinting}\n";
print "lens_tinting_code:$items->{tr_Tinting_code}\n";
print "lens_tintcolor_desc:$items->{tr_TintColor}\n";	
print "lens_tint_percent_desc:$items->{tr_TintPerCent}\n";
print "lens_ar_desc:$items->{tr_AntiReflective}\n";
print "lens_ar_code:$items->{tr_AR_code}\n";
print "lens_other1_desc:$items->{tr_Other1}\n";
print "lens_other1_code:$items->{tr_Other1_code}\n";
print "lens_other2_desc:$items->{tr_Other2}\n";
print "lens_other2_code:$items->{tr_Other2_code}\n";
print "lens_other3_desc:$items->{tr_Other3}\n";
print "lens_other3_code:$items->{tr_Other3_code}\n";
print "lens_other4_desc:$items->{tr_Other4}\n";
print "lens_other4_code:$items->{tr_Other4_code}\n";

$items->{frame_desc} = $items->{fp_mounting} unless (defined $items->{frame_desc} || $items->{frame_desc} ne '');
print "frame_desc:$items->{frame_desc}\n";

#after 1.5.8.4 complete adoption these next two can go away
my($retailer) = sql("select U_BizName from Users where U_InfoId = ?", $ref->{cust_num});
print "name:$retailer->{U_BizName}\n";

sub equalsIgnoreCase { my($a, $b) = @_; return lc($a) eq lc($b); }
